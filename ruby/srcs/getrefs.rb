#
#  The MIT License
# 
#  Copyright 2006-2010 Karl W. Pfalzer.
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#
require 'nldb'

COMMAND = "getRefs"

def usage
  cmd = COMMAND
  usage = <<L1

Usage: #{cmd} <topModule> <netlist.gv(.gz)?> ...

Generate refCntsByName map in Tcl format to output
file <topModule>.refs.tcl in same directory as (1st) netlist.

L1
  STDERR.puts usage
end

def dump_tcl(ref_cnts, ofid)
  puts "Info: #{ofid.path}: generating file ..."
  ofid.puts "\# Generated by #{COMMAND} on #{Time.now}\n\#\ncatch {unset refCntsByName}"
  ref_cnts.each do |key,val|
    ofid.puts "set refCntsByName(#{key}) #{val}"
  end
  ofid.close
end

args = ARGV
if (2 > args.length)
  usage
  exit 1
end

top_name = args[0]
netlists = args - args[0..0]

#Make sure we can create output file BEFORE long task
ofn = File.join(File.dirname(netlists[0]), "#{top_name}.refs.tcl")
ofid = File.new(ofn, "w")
top_module = Vmodule.new(top_name, netlists, nil, 1)

ref_cnts = {}
#Print cell names
top_module.foreach_cell do |cell, inst_nm|
  refnm = cell.get_ref_name
  ref_cnts[refnm] = 0 unless ref_cnts.has_key?(refnm)
  ref_cnts[refnm] += 1
end

dump_tcl(ref_cnts, ofid)



